  

class VulnConditionChoice(object):
    """VulnConditionChoice class
    """
    
    __slots__ = ['negate', 'choice_list']
    
    def __init__(self):
        self.negate = False
        self.choice_list = []
        
    def __str__(self):
        op = ' OR '
        if (self.negate == True):
            op = ' AND NOT '
           
        return op.join((str(cpe) for cpe in self.choice_list))
        

class VulnConditionGroup(object):
    """VulnerabilityCondition class
    """
    
    __slots__ = ['group_choice_list']
    
    
    def __init__(self):
        self.group_choice_list = []
    
    def __str__(self):
        res = ''
            
        for choice_list in self.group_choice_list:
            if res.endswith(')') == True:
                res += ' AND '
            res += '('    
            res += str(choice_list)
            res += ')'
            
        return  res


class VulnCondition(object):
    """VulnerabilityCondition class
    """
    
    __slots__ = ['conidtion_variants']
    
    def __init__(self):
        self.conidtion_variants = []
        
    def __str__(self):
        res = ''
            
        for variant in self.conidtion_variants:
            if res.endswith(')') == True:
                res += ' OR '
            res += '('    
            res += str(variant)
            res += ')'
            
        return  res
    

class VulnerabilityReference(object):
    """VulnerabilityReference class
    """
    
    __slots__ = ['list']
    
    def __init__(self):
        self.list = []


class Vulnerability(object):
    """
    Vulnerability class
    Contain info about vulnerability.
    @ivar cve: double with value of metrics score.
    @ivar cwe: SECURITY_PROTECTION_VALUES object with value of security protection.
    @ivar products: ACCESS_VECTOR_VALUES object with value of access vector.
    @ivar condition: ACCESS_COMPLEXITY_VALUES object with value of access complexity.
    @ivar published_datetime: AUTHENTICATION_VALUES object with value of authentication.
    @ivar last_modified_datetime: IMPACT_VALUES object with value of confidentiality impact.
    @ivar cvss_base_metrics: IMPACT_VALUES object with value of integrity impact.
    @ivar references: IMPACT_VALUES object with value of availability impact.
    @ivar summary: 
    """
    
    __slots__ = ['cve', 'cwe', 'products', 'condition', 'published_datetime', 
                 'last_modified_datetime', 'cvss_base_metrics', 'references',
                 'summary']
    
    def __init__(self):
        self.cve = None
        self.cwe = None
        self.products = [] 
        self.condition = VulnCondition()
        self.published_datetime = None
        self.last_modified_datetime = None
        self.cvss_base_metrics = None
        self.references = []
        self.summary = ""